"""
Split DVS-Gesture's event subsequences into samples of desired Batch Sampling Period (window_size) and Step-size if a sliding sampling window is needed

Provide directory of each split (i.e., train and test splits) containing long event sequences. Generates samples of fixed window and step sizes accordingly.

Note: Only run this script after executing 'split_dvs_gesture_seqs.py' first on the DVS-Gesture dataset sequences.
"""

"""
Split Sequences into Fixed-Duration Samples Script.

This script processes sub-sequences from the DVS-Gesture dataset, further splitting them into fixed-duration samples based on specified window sizes and step sizes. This is particularly useful for creating a dataset where each sample represents a distinct gesture with a uniform duration, facilitating more consistent input for machine learning models.

The script operates by dividing each gesture sub-sequence (previously separated by 'split_dvs_gesture_seqs.py') into smaller segments. Each segment corresponds to a fixed window of time (e.g., 500ms), with an optional overlap between consecutive windows defined by the step size (e.g., 250ms overlap).

Usage:
    Modify the `dataset_split_dir`, `out_window_size`, `out_step_size`, and `out_dir` variables to specify the input directory (where the sub-sequences are located), the desired duration of each output sample, the overlap between samples, and the output directory for the resulting samples, respectively.

    Run the script from the command line after setting the appropriate paths and parameters:
    ```
    python split_seqs_to_samples.py
    ```

Parameters:
    - dataset_split_dir: Path to the directory containing the gesture sub-sequences.
    - out_window_size: Desired duration of each output sample in milliseconds.
    - out_step_size: Overlap between consecutive samples in milliseconds.
    - out_dir: Directory where the split samples will be saved.

Features:
    - Supports processing of both training and testing splits by specifying different input directories.
    - Automatically organizes the output samples into directories corresponding to their gesture class.
    - Maintains the temporal order of events within each output sample, resetting timestamps relative to the start of the sample.

Note:
    - Ensure the input directory contains sub-sequences generated by 'split_dvs_gesture_seqs.py'.
    - The script assumes '.aedat' files for event data and expects corresponding '_labels.csv' files detailing gesture intervals.
"""

import os
import math
import bisect
from glob import glob
from scripts.data_processing.read_aedat import read_aedat_file
from split_dvs_gesture_seqs import write_events_to_file

def generate_sample_splits(dataset_split_dir, out_window_size, out_step_size, out_dir, VERBOSE=True):
    # Create output directory
    os.makedirs(out_dir, exist_ok=True)

    # ensure that path ends with '/' 
    os.path.join(dataset_split_dir, '')

    # convert to Linux dir format
    dataset_split_dir = dataset_split_dir.replace('\\', '/')

    # get .aedat events sample files
    event_files = glob(dataset_split_dir  + '**/*.aedat', recursive=True)

    # convert to Linux dir format
    event_files = [event_file.replace('\\', '/') for event_file in event_files]

    # split each events sample file in the dataset
    for i, event_file in enumerate(event_files):
        if VERBOSE:
            print('Splitting dataset sample [{}|{}]'.format(i+1, len(event_files)), end='\r')

        split_sample(event_file, out_window_size, out_step_size, out_dir, False) 
    
    if VERBOSE:
        print()


def split_sample(event_file, out_window_size, out_step_size, out_dir, VERBOSE=True):
    assert out_step_size <= out_window_size and out_step_size > 0
    # out_window_size: ms
    # out_step_size: ms

    # convert to Linux dir format
    event_file = event_file.replace('\\', '/')

    events_dict = read_aedat_file(event_file)

    sample_sub_folders = "/".join(event_file.split('/')[-3:-1])

    sample_name = event_file.split('/')[-1].split('.')[0]

    sample_out_dir = os.path.join(out_dir, sample_sub_folders)

    # Create output directory for class output split samples if does not exist
    os.makedirs(sample_out_dir, exist_ok=True)

    # get first event's timestamp to use for offset
    sample_start_ts = events_dict['ts'][0]
    sample_end_ts = events_dict['ts'][-1]

    # calculate total output samples
    num_out_samples = math.ceil((sample_end_ts - sample_start_ts)/(out_step_size*1e3))

    # loop over every output sample
    for k in range(num_out_samples):
        if VERBOSE:
            print('generating sample split [{}|{}]'.format(k+1, num_out_samples), end='\r')
        # set output path for k sample file in the format /out_dir/split/class_index/<sample_name>_<class_index>_<k>.aedat
        k_sample_file = os.path.join(sample_out_dir, sample_name + '_' + str(k) + '.aedat')

        # find output sample start and end time (size = out_window_size)
        k_start_ts = sample_start_ts + int(k * out_step_size * 1e3)
        k_end_ts = k_start_ts + int(out_window_size * 1e3)

        # find events within this time range
        # use bisection method to find the index of the events within the specified sample time window
        k_start_index = bisect.bisect_left(events_dict['ts'], k_start_ts)
        k_end_index = bisect.bisect_right(events_dict['ts'], k_end_ts)

        # extract events within the sample time and add to dict of sample events
        sample_events_dict = {
            'x': events_dict['x'][k_start_index:k_end_index],
            'y': events_dict['y'][k_start_index:k_end_index],
            'ts': events_dict['ts'][k_start_index:k_end_index],
            'p': events_dict['p'][k_start_index:k_end_index]
        }

        # remove timestamp offset from each event's timestamp of the generated sub sample
        sample_events_dict['ts'] = [ts - k_start_ts for ts in sample_events_dict['ts']]

        # write extracted sample's specified class's events to file
        write_events_to_file(k_sample_file, sample_events_dict)

    # print()
    if VERBOSE:
        print('Completed parsing sample [{}]'.format(sample_name))

    
if __name__ == "__main__":
    # set dataset split directory
    dataset_split_dir = '../Datasets/DVS_Gesture/DvsGesture/train/'

    # set output dir
    out_dir = 'dvs_gesture_500_250/'

    # specify sample output window size duration in ms
    out_window_size = 500

    # set output step size (0, sample_window_size]
    out_step_size = 250    

    # split dataset samples
    generate_sample_splits(dataset_split_dir, out_window_size, out_step_size, out_dir)

    # set dataset split directory
    dataset_split_dir = '../Datasets/DVS_Gesture/DvsGesture/test/'

    # split dataset samples
    generate_sample_splits(dataset_split_dir, out_window_size, out_step_size, out_dir)